{-@ LIQUID "--reflection" @-}
{-@ LIQUID "--ple" @-}
{-@ LIQUID "--noadt" @-}
-- {-@ LIQUID "--prune-unsorted" @-}

{-# LANGUAGE TemplateHaskell #-}

module Event.Types where

import           Data.Text (Text)
import           Data.Time.Clock (UTCTime)
import           GHC.Generics

#if NotLiquid
import           Kyowon.Core.Types (UTCTimestamp(..))
import           VRDT.Class.TH
import           VRDT.LWW (LWW(..))
import           VRDT.MultiSet (MultiSet(..))
#else
import           VRDT.Class
import qualified VRDT.MultiSet.Internal as Internal
import           VRDT.MultiSet.Internal (MultiSet(..), MultiSetOp(..))
import Liquid.Data.Maybe
import Liquid.Data.Map
#endif

#ifndef NotLiquid
data UTCTimestamp = UTCTimestamp UTCTime ClientId
  deriving (Eq, Ord)
type ClientId = Integer
#endif

type LWWU a = LWW UTCTimestamp a

data Event = Event {
    eventTitle :: LWWU Text
  , eventDescription :: LWWU Text
  , eventStartTime :: LWWU UTCTime
  , eventEndTime :: LWWU UTCTime
  , eventLocation :: LWWU Text
  , eventRSVPs :: MultiSet Text
  -- Messages?
  }
#if NotLiquid
  deriving (Generic)
#endif

#if NotLiquid
$(deriveVRDT ''Event)
#else
{-@
data LWW t a = LWW {
    lwwTime  :: t
  , lwwValue :: a
  }
@-}
data LWW t a = LWW {
    lwwTime  :: t
  , lwwValue :: a
  }

instance Ord t => VRDT (LWW t a) where
  type Operation (LWW t a) = LWW t a
  apply l1 l2
    | lwwTime l1 > lwwTime l2 = l1
    | otherwise = l2
  compatible l1 l2 = lwwTime l1 /= lwwTime l2
  lawCommutativity x y z = ()
  lawCompatibilityCommutativity _ _ = ()

{-@ reflect apply' @-}
apply' :: Ord a => MultiSet a -> Operation (MultiSet a) -> MultiSet a
apply' = Internal.apply

{-@ assume coercAxiom0 :: {v : () | apply' ~~ Internal.apply} @-}
coercAxiom0 :: ()
coercAxiom0 = ()
instance Ord a => VRDT (Internal.MultiSet a) where
    type Operation (Internal.MultiSet a) = Internal.MultiSetOp a

    apply = apply'

    compatible _ _ = True
    
    lawCommutativity m op1 op2 = Internal.lawCommutativity m op1 op2

    lawCompatibilityCommutativity _ _ = ()


-- Generated by $(deriveVRDT ''Event):
data EventOp
  = EventDescriptionOp (Operation (LWWU Text)) |
    EventEndTimeOp (Operation (LWWU UTCTime)) |
    EventLocationOp (Operation (LWWU Text)) |
    EventRSVPsOp (Operation (MultiSet Text)) |
    EventStartTimeOp (Operation (LWWU UTCTime)) |
    EventTitleOp (Operation (LWWU Text))
--   = EventDescriptionOp (Operation (LWWU Text)) |
--     EventEndTimeOp (Operation (LWWU UTCTime)) |
--     EventLocationOp (Operation (LWWU Text)) |
--     EventRSVPsOp (Operation (MultiSet Text)) |
--     EventStartTimeOp (Operation (LWWU UTCTime)) |
--     EventTitleOp (Operation (LWWU Text))
  -- deriving Generic
instance VRDT Event where
  type Operation Event = EventOp
  compatible
    (EventDescriptionOp op1_adIw)
    (EventDescriptionOp op2_adIx)
    = (compatible op1_adIw) op2_adIx
  compatible
    (EventEndTimeOp op1_adIy)
    (EventEndTimeOp op2_adIz)
    = (compatible op1_adIy) op2_adIz
  compatible
    (EventLocationOp op1_adIA)
    (EventLocationOp op2_adIB)
    = (compatible op1_adIA) op2_adIB
  compatible
    (EventRSVPsOp op1_adIC)
    (EventRSVPsOp op2_adID)
    = (compatible op1_adIC) op2_adID
  compatible
    (EventStartTimeOp op1_adIE)
    (EventStartTimeOp op2_adIF)
    = (compatible op1_adIE) op2_adIF
  compatible
    (EventTitleOp op1_adIG)
    (EventTitleOp op2_adIH)
    = (compatible op1_adIG) op2_adIH
  compatible _ _ = True
  apply v_adIk (EventDescriptionOp op_adIl)
    = v_adIk
        {eventDescription = (apply (eventDescription v_adIk))
                              op_adIl}
  apply v_adIm (EventEndTimeOp op_adIn)
    = v_adIm
        {eventEndTime = (apply (eventEndTime v_adIm)) op_adIn}
  apply v_adIo (EventLocationOp op_adIp)
    = v_adIo
        {eventLocation = (apply (eventLocation v_adIo)) op_adIp}
  apply v_adIq (EventRSVPsOp op_adIr)
    = v_adIq
        {eventRSVPs = (apply (eventRSVPs v_adIq)) op_adIr}
  apply v_adIs (EventStartTimeOp op_adIt)
    = v_adIs
        {eventStartTime = (apply (eventStartTime v_adIs))
                            op_adIt}
  apply v_adIu (EventTitleOp op_adIv)
    = v_adIu
        {eventTitle = (apply (eventTitle v_adIu)) op_adIv}
  lawCommutativity
    v_adII
    (EventDescriptionOp op1_adIJ)
    (EventDescriptionOp op2_adIK)
    = ((lawCommutativity (eventDescription v_adII))
         op1_adIJ)
        op2_adIK
  lawCommutativity
    v_adIL
    (EventEndTimeOp op1_adIM)
    (EventEndTimeOp op2_adIN)
    = ((lawCommutativity (eventEndTime v_adIL)) op1_adIM)
        op2_adIN
  lawCommutativity
    v_adIO
    (EventLocationOp op1_adIP)
    (EventLocationOp op2_adIQ)
    = ((lawCommutativity (eventLocation v_adIO)) op1_adIP)
        op2_adIQ
  lawCommutativity
    v_adIR
    (EventRSVPsOp op1_adIS)
    (EventRSVPsOp op2_adIT)
    = ((lawCommutativity (eventRSVPs v_adIR)) op1_adIS)
        op2_adIT
  lawCommutativity
    v_adIU
    (EventStartTimeOp op1_adIV)
    (EventStartTimeOp op2_adIW)
    = ((lawCommutativity (eventStartTime v_adIU)) op1_adIV)
        op2_adIW
  lawCommutativity
    v_adIX
    (EventTitleOp op1_adIY)
    (EventTitleOp op2_adIZ)
    = ((lawCommutativity (eventTitle v_adIX)) op1_adIY)
        op2_adIZ
  lawCommutativity _ _ _ = ()
  lawCompatibilityCommutativity
    (EventDescriptionOp op1_adJ0)
    (EventDescriptionOp op2_adJ1)
    = (lawCompatibilityCommutativity op1_adJ0) op2_adJ1
  lawCompatibilityCommutativity
    (EventEndTimeOp op1_adJ2)
    (EventEndTimeOp op2_adJ3)
    = (lawCompatibilityCommutativity op1_adJ2) op2_adJ3
  lawCompatibilityCommutativity
    (EventLocationOp op1_adJ4)
    (EventLocationOp op2_adJ5)
    = (lawCompatibilityCommutativity op1_adJ4) op2_adJ5
  lawCompatibilityCommutativity
    (EventRSVPsOp op1_adJ6)
    (EventRSVPsOp op2_adJ7)
    = (lawCompatibilityCommutativity op1_adJ6) op2_adJ7
  lawCompatibilityCommutativity
    (EventStartTimeOp op1_adJ8)
    (EventStartTimeOp op2_adJ9)
    = (lawCompatibilityCommutativity op1_adJ8) op2_adJ9
  lawCompatibilityCommutativity
    (EventTitleOp op1_adJa)
    (EventTitleOp op2_adJb)
    = (lawCompatibilityCommutativity op1_adJa) op2_adJb
  lawCompatibilityCommutativity _ _ = ()
#endif



